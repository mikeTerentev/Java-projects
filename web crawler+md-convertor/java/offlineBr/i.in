package crawler;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SimpleWebCrawler implements WebCrawler {
    private Downloader downloader;
    private HashMap<String, Image> images = new HashMap<>();
    private HashMap<String, Page> pages = new HashMap<>();

    private List<String> set = new ArrayList<>();
    private List<Integer> setIndx = new ArrayList<>();

    SimpleWebCrawler(Downloader downloader) {
        this.downloader = downloader;
    }

    public Page crawl(String URL, int dpth) {
        URL = new Link(URL).getURL();
        String webSite = "", title = "";
        Page newPage;
        boolean isDownloaded = true;

        try {
            if (dpth == 0) {
                webSite = "";
                title = "";
            } else {
                webSite = getCode(downloader.download(URL));
                title = getTitle(webSite);
            }
        } catch (IOException e) {
            System.err.print("downloaderCrash");
            isDownloaded = false;
        }

        pages.putIfAbsent(URL, new Page(URL, title));
        newPage = pages.get(URL);

        if (dpth == 0 || !isDownloaded) {
            return newPage;
        }

        for (int i = 0; i < webSite.length() - 1; ) {
            int i_scnd = i + 1;

            if (webSite.charAt(i) != '<') {
                i++;
                continue;
            }

            for (Elements curType : Elements.values()) {
                if (isElement(curType.getHtmlcode(), webSite, i + 1)) {
                    int closingPos = closingElementPos(webSite, i);
                    Element element;

                    if (closingPos == -1) break;
                    element = new Element(webSite.substring(i, closingPos));
                    i_scnd = closingPos;

                    if (curType == Elements.anchorTag && element.getAttribute("href") != null) {
                        Attribute hrefAttribute = element.getAttribute("href");
                        Link link = new Link(URL).getLink(hrefAttribute.getVal());
                        Page page;
                        if (pages.containsKey(link.getURL())) page = pages.get(link.getURL());
                        else {
                            set.add(link.getURL());
                            setIndx.add(dpth - 1);
                            //page = crawl(link.getURL(), dpth - 1);
                        }
                        if (page == null) continue;
                        newPage.addLink(page);
                        continue;
                    }

                    if (curType == Elements.imageTag && element.getAttribute("src") != null) {
                        Link link = new Link(URL).getLink(element.getAttribute("src").getVal());
                        Image image;

                        if (images.containsKey(link.getURL())) {
                            image = images.get(link.getURL());
                        } else {
                            image = createImage(link.getURL());
                            images.put(link.getURL(), image);
                        }
                        newPage.addImage(image);
                    }
                }
            }
            i = i_scnd;
        }
        if (!set.isEmpty()) {
            set.remove(set.size() - 1);
            setIndx.remove(setIndx.size() - 1);
            String x = set[set.size() - 1];
            Integer i = setIndx[setIndx.size() - 1];
            newPage = crawl(x, i);
        }
        return newPage;
    }

    private Image createImage(String url) {
        String fileName = UUID.randomUUID().toString();

        try {
            Files.write(Paths.get(fileName), Staff.ImageConvert(downloader.download(url)));
        } catch (IOException e) {
            System.err.print("ImageLoadFail");
        }

        return new Image(url, fileName);

    }

    private boolean isElement(String element, String content, int pos) {
        int length = element.length();

        return pos + length - 1 < content.length() && content.substring(pos, pos + length).toLowerCase().equals(element);
    }

    private int closingElementPos(String content, int offset) {
        while (offset + 1 < content.length()) {
            if (content.charAt(offset + 1) == '>') return offset + 1;
            offset++;
        }
        return -1;
    }

    private String getCode(InputStream is) {
        StringBuilder code = new StringBuilder();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(is));

        bufferedReader.lines().forEach(code::append);
        return code.toString();
    }

    public String getTitle(String content) {
        Matcher matcher = Pattern.compile("<title>(.*?)</title>").matcher(content);
        String result;

        if (!matcher.find()) {
            return "";
        }

        result = matcher.group();
        return Staff.changeStaffFormat(result.substring(7, result.lastIndexOf("</")));
    }
}
